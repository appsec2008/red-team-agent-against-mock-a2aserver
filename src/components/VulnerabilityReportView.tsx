
"use client";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import React, { type ReactNode, useEffect, useRef } from 'react';
import { cn } from "@/lib/utils";
import mermaid from 'mermaid';

interface VulnerabilityReportViewProps {
  report: string | null;
}

// Initialize mermaid.js
// It's important to do this only once.
// Using a random ID for the diagram to avoid collisions.
mermaid.initialize({
  startOnLoad: false, // We will render it manually
  theme: 'neutral', // Use a theme that works well in both light and dark modes
  securityLevel: 'loose',
});

// A component that takes mermaid code and renders it.
const MermaidDiagram = ({ code }: { code: string }) => {
  const ref = useRef<HTMLDivElement>(null);
  const uniqueId = `mermaid-${Math.random().toString(36).slice(2, 9)}`;

  useEffect(() => {
    if (code && ref.current) {
      mermaid.render(uniqueId, code, (svgCode) => {
        if (ref.current) {
            ref.current.innerHTML = svgCode;
        }
      }).catch(err => {
        console.error("Mermaid render error:", err);
        if (ref.current) {
            ref.current.innerHTML = `<pre>Error rendering diagram: ${err.message}</pre>`;
        }
      });
    }
  }, [code, uniqueId]);

  return <div ref={ref} className="mermaid-diagram-container p-4 my-2 rounded-md bg-muted/40 overflow-auto flex justify-center" />;
};


export function VulnerabilityReportView({ report }: VulnerabilityReportViewProps) {
  if (report === null) {
    return (
      <Card className="h-full flex items-center justify-center">
        <CardContent>
          <p className="text-muted-foreground">No report generated yet.</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="h-full flex flex-col">
      <CardHeader>
        <CardTitle className="font-headline text-lg">Vulnerability Report</CardTitle>
      </CardHeader>
      <CardContent className="flex-grow overflow-hidden">
        <ScrollArea className="h-full pr-4">
          <div className="text-sm font-body">
            <ReactMarkdown
              remarkPlugins={[remarkGfm]}
              components={{
                h1: ({node, ...props}) => <h1 className="text-2xl font-headline mt-4 mb-2 pb-1 border-b border-border" {...props} />,
                h2: ({node, ...props}) => <h2 className="text-xl font-headline mt-3 mb-1 pb-1 border-b border-border" {...props} />,
                h3: ({node, ...props}) => <h3 className="text-lg font-headline mt-2 mb-1" {...props} />,
                h4: ({node, ...props}) => <h4 className="text-base font-headline mt-1 mb-1" {...props} />,
                p: ({ node, children, ...props }) => {
                  const firstChild = React.Children.toArray(children)[0];
                  if (React.isValidElement(firstChild) && firstChild.type === 'pre') {
                    return <>{children}</>;
                  }
                  return <p className="mb-2 leading-relaxed" {...props}>{children}</p>;
                },
                ul: ({node, ...props}) => <ul className="list-disc pl-6 mb-2 space-y-1" {...props} />,
                ol: ({node, ...props}) => <ol className="list-decimal pl-6 mb-2 space-y-1" {...props} />,
                li: ({node, ...props}) => <li className="mb-0.5" {...props} />,
                pre: ({ node, children, className, ...props }) => {
                  const child = React.Children.toArray(children)[0];
                  // Check if the code block is for mermaid
                  if (React.isValidElement(child) && typeof child.props.children === 'string' && child.props.className?.includes('language-mermaid')) {
                    return <MermaidDiagram code={child.props.children} />;
                  }
                  // Standard code block rendering
                  return (
                    <pre className={cn(className, "font-code bg-muted/40 text-foreground p-3 my-2 rounded-md overflow-x-auto text-xs")} {...props}>
                      {children}
                    </pre>
                  );
                },
                code: ({ node, className, children, inline, ...props }) => {
                  if (!inline) {
                    return (
                      <code className={className} {...props}>
                        {String(children).replace(/\n$/, '')}
                      </code>
                    );
                  } else {
                    return (
                      <code className={cn(className, "font-code bg-muted/50 text-accent-foreground px-1 py-0.5 rounded-sm text-xs")} {...props}>
                        {children}
                      </code>
                    );
                  }
                },
                table: ({node, ...props}) => <table className="table-auto w-full my-3 border-collapse border border-border" {...props} />,
                thead: ({node, ...props}) => <thead className="bg-muted/50" {...props} />,
                th: ({node, ...props}) => <th className="border border-border px-3 py-1.5 text-left font-semibold" {...props} />,
                td: ({node, ...props}) => <td className="border border-border px-3 py-1.5" {...props} />,
                blockquote: ({node, ...props}) => <blockquote className="pl-4 border-l-4 border-primary italic my-3 text-muted-foreground" {...props} />,
                hr: ({node, ...props}) => <hr className="my-4 border-border" {...props} />,
                a: ({node, ...props}) => <a className="text-primary hover:underline" {...props} />,
                strong: ({node, ...props}) => <strong className="font-semibold" {...props} />,
                em: ({node, ...props}) => <em className="italic" {...props} />,
              }}
            >
              {report}
            </ReactMarkdown>
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
}
